{# filepath: /c:/Users/Dev404/Documents/foot_connect/FOOT_CONNECT/templates/home/index.html.twig #}
{% extends 'base.html.twig' %}

{% block stylesheets %}
	{{ parent() }}
	<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
	<style>
		.card-enter {
			animation: cardEnter 0.5s ease-out forwards;
		}

		@keyframes cardEnter {
			from {
				opacity: 0;
				transform: translateY(20px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}
		.image-container {
			position: relative;
			height: 400px;
			width: 100%;
			overflow: hidden;
		}

		@media(max-width: 768px) {
			.image-container {
				height: 240px;
			}
		}

		.comment-section {
			transition: all 0.3s ease-in-out;
		}

		.image-container {
			aspect-ratio: 4 / 3;
			overflow: hidden;
		}

		.description-text {
			display: -webkit-box;
			-webkit-line-clamp: 3;
			-webkit-box-orient: vertical;
			overflow: hidden;
		}
	</style>
{% endblock %}

{% block body %}
	<main class="bg-gradient-to-b from-gray-50 to-gray-100 min-h-screen">
		<section class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<header>
				<h1 class="text-3xl font-bold text-center text-gray-900 mb-10">
					<i class="fas fa-stream text-blue-600 mr-2"></i>
					Fil d'actualités
				</h1>
			</header>


			{% if photos is defined and photos|length > 0 %}
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
					{% for photo in photos %}
						<article class="card-enter bg-white rounded-xl shadow-md overflow-hidden transform transition-all duration-300 hover:shadow-xl" style="animation-delay: {{ loop.index * 0.1 }}s;">
							<header class="p-4 border-b flex justify-between items-center">
								<div class="flex items-center space-x-3">
									<div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-semibold">
										{{ photo.user.pseudo|slice(0,1)|upper }}
									</div>
									<div>
										<a href="{{ path('app_profil_user', {'id': photo.user.id}) }}" class="font-semibold text-gray-900 hover:text-blue-600 transition-colors">
											{{ photo.user.pseudo }}
										</a>
										<p class="text-xs text-gray-500">
											{{ photo.createdAt|date('d/m/Y H:i') }}
										</p>
									</div>
								</div>

							</header>

							<figure class="image-container group relative">
								<img src="{{ asset('uploads/photos/' ~ photo.photoUrl) }}" alt="Photo de {{ photo.user.pseudo }}" class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105">
								<figcaption class="absolute bottom-0 left-0 w-full bg-gradient-to-t from-black/70 to-transparent text-white p-3 text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-300">
									Photo de
									{{ photo.user.pseudo }}
								</figcaption>
							</figure>

							<section class="p-5">
								<p class="description-text text-gray-800 mb-4 text-base leading-6 bg-gray-50 p-3 rounded-lg shadow-sm border border-gray-200">
									{{ photo.description|nl2br }}
								</p>

								<footer class="flex items-center justify-between mt-4 pt-3 border-t border-gray-100">
									{% if app.user %}
										<button class="like-button group flex items-center space-x-2 hover:scale-105 transition-transform" data-photo-id="{{ photo.id }}">
											<span class="w-10 h-10 rounded-full flex items-center justify-center transition-colors duration-300 bg-gray-100 text-gray-500 group-hover:bg-pink-50 group-hover:text-pink-500 shadow-sm">
												<i class="fas fa-heart"></i>
											</span>
											<span class="like-count text-sm font-medium bg-gray-50 px-2 py-1 rounded-full">{{ photo.likes|length }}</span>
										</button>
									{% else %}
										<a href="{{ path('app_login') }}" class="group flex items-center space-x-2 hover:scale-105 transition-transform">
											<span class="w-10 h-10 rounded-full flex items-center justify-center shadow-sm bg-gray-100 text-gray-400 group-hover:bg-gray-200 transition-colors duration-300">
												<i class="fas fa-heart"></i>
											</span>
											<div class="flex flex-col">
												<span class="like-count text-sm font-medium bg-gray-50 px-2 py-1 rounded-full">{{ photo.likes|length }}</span>
												<span class="text-xs text-blue-600 whitespace-nowrap">Se connecter</span>
											</div>
										</a>
									{% endif %}

									<button class="comment-toggle group flex items-center space-x-2 hover:scale-105 transition-transform" data-target="comments-{{ photo.id }}">
										<span class="w-10 h-10 rounded-full flex items-center justify-center shadow-sm bg-gray-100 text-gray-500 group-hover:bg-blue-50 group-hover:text-blue-500 transition-colors duration-300">
											<i class="fas fa-comment"></i>
										</span>
										<span class="text-sm font-medium bg-gray-50 px-2 py-1 rounded-full">{{ photo.comments|length }}</span>
									</button>

									{% if app.user == photo.user %}
										<a href="{{ path('app_delete_photo', {'id': photo.id}) }}" class="group flex items-center space-x-2 hover:scale-105 transition-transform" onclick="return confirm('Voulez-vous vraiment supprimer cette publication ?')">
											<span class="w-10 h-10 rounded-full flex items-center justify-center shadow-sm bg-gray-100 text-gray-500 group-hover:bg-red-50 group-hover:text-red-500 transition-colors duration-300">
												<i class="fas fa-trash"></i>
											</span>
										</a>
									{% endif %}
								</footer>
							</section>

							<section id="comments-{{ photo.id }}" class="hidden comment-section">
								<div class="border-t border-gray-200 bg-gray-50 p-4">
									<div class="space-y-3 max-h-72 overflow-y-auto px-1">
										{% for comment in photo.comments %}
											<!-- Code corrigé -->
											<article id="comment-{{ comment.id }}" class="flex space-x-3 hover:bg-gray-50 p-2 rounded-lg transition-colors">
												<div class="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white font-bold text-sm shadow-sm flex-shrink-0">
													{{ comment.user.pseudo|slice(0,1)|upper }}
												</div>
												<div class="flex-1 bg-white rounded-lg p-3 shadow-sm">
													<header class="flex justify-between items-start mb-1">
														<span class="font-medium text-xs text-gray-700">{{ comment.user.pseudo }}</span>
														<span class="text-xs text-gray-400">{{ comment.createdAt|date('H:i') }}</span>
													</header>
													<p class="commentairemsg text-sm text-gray-800 break-words">{{ comment.message }}</p>
												</div>
											</article>
										{% else %}
											<div class="text-center py-6 bg-white rounded-lg border border-gray-100">
												<p class="text-gray-500">Aucun commentaire pour le moment</p>
											</div>
										{% endfor %}
									</div>

									{% if app.user %}
										{% if commentForms[photo.id] is defined %}
											{{ form_start(commentForms[photo.id], {
                                                'attr': {
                                                    'class': 'mt-4 comment-form',
                                                    'id': 'comment-form-' ~ photo.id,
                                                    'data-photo-id': photo.id
                                                }
                                            }) }}
											<div class="flex space-x-2 items-center bg-white p-2 rounded-full shadow-sm border border-gray-100">
												{{ form_widget(commentForms[photo.id].message, {
                                                'attr': {
                                                    'class': 'flex-1 rounded-full px-4 py-2 border-0 focus:ring-2 focus:ring-blue-500 focus:outline-none text-sm',
                                                    'placeholder': 'Ajouter un commentaire...'
                                                }
                                            }) }}
												<button type="submit" class="p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors duration-300 flex items-center justify-center shadow-sm hover:shadow flex-shrink-0">
													<i class="fas fa-paper-plane"></i>
												</button>
											</div>
											{{ form_end(commentForms[photo.id]) }}
										{% endif %}
									{% else %}
										<div class="mt-4 flex items-center justify-between bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
											<p class="text-sm text-gray-600">Connectez-vous pour commenter</p>
											<a href="{{ path('app_login') }}" class="text-sm font-medium text-white bg-blue-600 px-4 py-2 rounded-full hover:bg-blue-700 transition-colors shadow-sm hover:shadow-md">
												Se connecter
											</a>
										</div>
									{% endif %}
								</div>
							</section>
						</article>
					{% endfor %}
				</div>
			{% else %}
				<section class="text-center py-16 bg-white rounded-xl shadow-md">
					<div class="w-24 h-24 mx-auto bg-blue-100 rounded-full flex items-center justify-center text-blue-500 mb-6 shadow-inner">
						<i class="fas fa-images text-4xl"></i>
					</div>
					<h3 class="text-xl font-semibold text-gray-900 mb-2">Aucune publication</h3>
					<p class="text-gray-600 mb-6">Commencez à partager vos moments avec la communauté !</p>
					<a href="{{ path('app_profil') }}" class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors duration-300 shadow-md hover:shadow-lg">
						<i class="fas fa-plus-circle mr-2"></i>
						Créer une publication
					</a>
				</section>
			{% endif %}
		</section>
	</main>

	<script>
		document.addEventListener('DOMContentLoaded', function () { // Ensure all event listeners and logic are properly closed
});
// Gestion des likes
document.querySelectorAll('.like-button').forEach(button => {
button.addEventListener('click', async function () {
const photoId = this.dataset.photoId;
const isLiked = this.dataset.liked === 'true';

try {
const response = await fetch (`/like/${photoId}`);
if (response.ok) {
this.dataset.liked = ! isLiked;
const icon = this.querySelector('.fa-heart');
const count = this.querySelector('.like-count');
const currentCount = parseInt(count.textContent);

if (! isLiked) {
icon.parentElement.classList.add('bg-pink-100', 'text-pink-500');
icon.classList.add('like-animation');
count.textContent = currentCount + 1;
} else {
icon.parentElement.classList.remove('bg-pink-100', 'text-pink-500');
count.textContent = currentCount - 1;
}

setTimeout(() => icon.classList.remove('like-animation'), 500);
}
} catch (error) {
console.error('Erreur lors du like:', error);
}
});
});

// Gestion des commentaires
document.querySelectorAll('.comment-toggle').forEach(button => {
button.addEventListener('click', function () {
const targetId = this.dataset.target;
const commentSection = document.getElementById(targetId);

if (commentSection.classList.contains('hidden')) {
commentSection.classList.remove('hidden');
setTimeout(() => {
commentSection.scrollIntoView({behavior: 'smooth'});
const input = commentSection.querySelector('input, textarea');
if (input) 
input.focus();

}, 100);
} else {
commentSection.classList.add('hidden');
}
});
});

// Dans votre fichier index.html.twig

document.querySelectorAll('.comment-form').forEach(form => {
    form.addEventListener('submit', async function (event) {
        event.preventDefault();
        
        // Variables en camelCase selon les conventions
        const photoId = this.dataset.photoId;
        const formData = new FormData(this);
        formData.append('photo_id', photoId);
        const commentSection = document.getElementById(`comments-${photoId}`);
        const commentList = commentSection.querySelector('.space-y-3');
        const messageInput = this.querySelector('[name="commentaire[message]"]');
        const message = messageInput.value.trim();
        
        // Validation du message
        if (!message) {
            messageInput.classList.add('ring-2', 'ring-red-500');
            setTimeout(() => messageInput.classList.remove('ring-2', 'ring-red-500'), 2000);
            return;
        }
        
        // Affichage du chargement
        const submitButton = this.querySelector('button[type="submit"]');
        const originalContent = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        
        try {
            // Envoi de la requête au serveur
            const response = await fetch(this.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            // Vérification explicite de la réussite de l'enregistrement
            if (response.ok) {
                // Affichage temporaire du commentaire pour un feedback immédiat
                const userInitial = document.querySelector('.w-10.h-10.rounded-full.bg-blue-100').textContent.trim();
                const userName = document.querySelector('.font-semibold.text-gray-900').textContent.trim();
                const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                
                // Création du commentaire
                const commentElement = document.createElement('article');
                commentElement.id = `comment-temp-${Date.now()}`;
                commentElement.className = 'flex space-x-3 hover:bg-gray-50 p-2 rounded-lg transition-colors';
                
                commentElement.innerHTML = `
                    <div class="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white font-bold text-sm shadow-sm flex-shrink-0">
                        ${userInitial}
                    </div>
                    <div class="flex-1 bg-white rounded-lg p-3 shadow-sm">
                        <header class="flex justify-between items-start mb-1">
                            <span class="font-medium text-xs text-gray-700">${userName}</span>
                            <span class="text-xs text-gray-400">${currentTime}</span>
                        </header>
                        <p class="commentairemsg text-sm text-gray-800 break-words">${message}</p>
                    </div>
                `;
                
                // Suppression du message "Aucun commentaire"
                const noComments = commentList.querySelector('.text-center');
                if (noComments) {
                    noComments.remove();
                }
                
                // Animation fluide d'apparition
                commentElement.style.opacity = '0';
                commentList.appendChild(commentElement);
                
                setTimeout(() => {
                    commentElement.style.transition = 'opacity 0.3s ease-out';
                    commentElement.style.opacity = '1';
                }, 10);
                
                // Mise à jour du compteur
                const commentCounter = document.querySelector(`[data-target="comments-${photoId}"] span:last-child`);
                if (commentCounter) {
                    const currentCount = parseInt(commentCounter.textContent);
                    commentCounter.textContent = currentCount + 1;
                }
                
                // Réinitialisation du formulaire
                this.reset();
            } else {
                console.error('Erreur lors de l\'ajout du commentaire:', response.statusText);
            }
        } catch (error) {
            console.error('Erreur lors de l\'ajout du commentaire:', error);
        } finally {
            // Restaurer l'état du bouton
            submitButton.disabled = false;
            submitButton.innerHTML = originalContent;
        }
    });
});
	</script>
{% endblock %}
